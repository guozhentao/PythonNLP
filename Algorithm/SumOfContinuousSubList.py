# 给定一个数组，返回其子数组的最大累加和。
# 例如，arr=[1,-2,3,5,-2,6,-1],在所有的子数组中，
# [3,5,-2,6]可以累加出最大的和12，所以返回12
# 数组的长度为N，时间复杂度为O(N)
""""""
"""1、定义两个变量，一个用来存储之前的累加值，一个用来存储当前的最大和。
遍历数组中的每个元素，假设遍历到第i个数时：
　　①如果前面的累加值为负数或者等于0，那对累加值清0重新累加，把当前的第i个数的值赋给累加值。
　　②如果前面的累加值为正数，那么继续累加，即之前的累加值加上当前第i个数的值作为新的累加值。
2、判断累加值是否大于最大值：如果大于最大值，则最大和更新；否则，继续保留之前的最大和。"""
# 如果前面数的累加加上当前数小于当前数，说明这次累加对总体的结果是无效的；
# 如果前面数的累加加上当前数大于当前数，说明这次累加对结果是具有促进效果的，结果在考虑的范围内

def find_greatest_sum_of_sub_list(array):
    sum = array[0]
    presum = 0
    for i in array:
        if presum <= 0:
            presum = i
        else:
            presum += i
        sum = max(presum, sum)
    return sum


arr = [1,-2,3,5,-2,6,-1]
sum = find_greatest_sum_of_sub_list(arr)
print(sum)
